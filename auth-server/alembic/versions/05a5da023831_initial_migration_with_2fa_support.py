"""Initial migration with 2FA support

Revision ID: 05a5da023831
Revises: 
Create Date: 2025-08-20 12:41:12.248226

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '05a5da023831'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('document_versions')
    op.drop_table('custom_field_values')
    op.drop_table('document_types')
    op.drop_table('tags')
    op.drop_table('documents')
    op.drop_table('shared_nodes')
    op.drop_table('document_types_custom_fields')
    op.drop_table('pages')
    op.drop_table('custom_fields')
    op.drop_table('nodes_tags')
    op.alter_column('email_otps', 'user_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('email_otps', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('email_otps', 'is_used',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('email_otps', 'purpose',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               existing_server_default=sa.text("'login'::character varying"))
    op.drop_constraint('groups_name_key', 'groups', type_='unique')
    op.drop_constraint('groups_home_folder_id_fkey', 'groups', type_='foreignkey')
    op.drop_constraint('groups_inbox_folder_id_fkey', 'groups', type_='foreignkey')
    op.drop_column('groups', 'inbox_folder_id')
    op.drop_column('groups', 'delete_me')
    op.drop_column('groups', 'delete_special_folders')
    op.drop_column('groups', 'home_folder_id')
    op.alter_column('nodes', 'user_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.drop_constraint('unique title per parent per group', 'nodes', type_='unique')
    op.drop_constraint('unique title per parent per user', 'nodes', type_='unique')
    op.drop_constraint('nodes_group_id_fkey', 'nodes', type_='foreignkey')
    op.drop_constraint('nodes_user_id_fkey', 'nodes', type_='foreignkey')
    op.create_foreign_key(None, 'nodes', 'users', ['user_id'], ['id'], use_alter=True)
    op.drop_column('nodes', 'group_id')
    op.drop_constraint('permissions_codename_key', 'permissions', type_='unique')
    op.drop_constraint('permissions_name_key', 'permissions', type_='unique')
    op.alter_column('users', 'first_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.alter_column('users', 'last_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.alter_column('users', 'home_folder_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('users', 'inbox_folder_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('users', 'is_2fa_enabled',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.drop_constraint('users_email_key', 'users', type_='unique')
    op.drop_constraint('users_username_key', 'users', type_='unique')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint('users_username_key', 'users', ['username'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint('users_email_key', 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('users', 'is_2fa_enabled',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('users', 'inbox_folder_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('users', 'home_folder_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('users', 'last_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.alter_column('users', 'first_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.create_unique_constraint('permissions_name_key', 'permissions', ['name'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint('permissions_codename_key', 'permissions', ['codename'], postgresql_nulls_not_distinct=False)
    op.add_column('nodes', sa.Column('group_id', sa.UUID(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'nodes', type_='foreignkey')
    op.create_foreign_key('nodes_user_id_fkey', 'nodes', 'users', ['user_id'], ['id'], ondelete='CASCADE', initially='DEFERRED', deferrable=True)
    op.create_foreign_key('nodes_group_id_fkey', 'nodes', 'groups', ['group_id'], ['id'], ondelete='CASCADE')
    op.create_unique_constraint('unique title per parent per user', 'nodes', ['parent_id', 'title', 'user_id'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint('unique title per parent per group', 'nodes', ['parent_id', 'title', 'group_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('nodes', 'user_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.add_column('groups', sa.Column('home_folder_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('groups', sa.Column('delete_special_folders', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('groups', sa.Column('delete_me', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('groups', sa.Column('inbox_folder_id', sa.UUID(), autoincrement=False, nullable=True))
    op.create_foreign_key('groups_inbox_folder_id_fkey', 'groups', 'folders', ['inbox_folder_id'], ['node_id'], ondelete='CASCADE', deferrable=True)
    op.create_foreign_key('groups_home_folder_id_fkey', 'groups', 'folders', ['home_folder_id'], ['node_id'], ondelete='CASCADE', deferrable=True)
    op.create_unique_constraint('groups_name_key', 'groups', ['name'], postgresql_nulls_not_distinct=False)
    op.alter_column('email_otps', 'purpose',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_server_default=sa.text("'login'::character varying"))
    op.alter_column('email_otps', 'is_used',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('email_otps', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('email_otps', 'user_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.create_table('nodes_tags',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('node_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tag_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['node_id'], ['nodes.id'], name='nodes_tags_node_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], name='nodes_tags_tag_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='nodes_tags_pkey')
    )
    op.create_table('custom_fields',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('extra_data', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('group_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.CheckConstraint('user_id IS NOT NULL OR group_id IS NOT NULL', name='check__user_id_not_null__or__group_id_not_null'),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], name='custom_fields_group_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='custom_fields_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='custom_fields_pkey'),
    sa.UniqueConstraint('name', name='custom_fields_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('pages',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('page_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('lang', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('text', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('document_version_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['document_version_id'], ['document_versions.id'], name='pages_document_version_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='pages_pkey')
    )
    op.create_table('document_types_custom_fields',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('document_type_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('custom_field_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['custom_field_id'], ['custom_fields.id'], name='document_types_custom_fields_custom_field_id_fkey'),
    sa.ForeignKeyConstraint(['document_type_id'], ['document_types.id'], name='document_types_custom_fields_document_type_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='document_types_custom_fields_pkey')
    )
    op.create_table('shared_nodes',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('node_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('group_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('role_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('owner_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.CheckConstraint('user_id IS NOT NULL OR group_id IS NOT NULL', name='check__user_id_not_null__or__group_id_not_null'),
    sa.PrimaryKeyConstraint('id', name='shared_nodes_pkey')
    )
    op.create_table('documents',
    sa.Column('node_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('ocr', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('ocr_status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('document_type_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('preview_error', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('preview_status', postgresql.ENUM('ready', 'pending', 'failed', name='preview_status'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['document_type_id'], ['document_types.id'], name='documents_document_type_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['node_id'], ['nodes.id'], name='documents_node_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('node_id', name='documents_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('tags',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('fg_color', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('bg_color', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('pinned', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('group_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.CheckConstraint('user_id IS NOT NULL OR group_id IS NOT NULL', name='check__user_id_not_null__or__group_id_not_null'),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], name='tags_group_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='tag_user_id_fk'),
    sa.PrimaryKeyConstraint('id', name='tags_pkey'),
    sa.UniqueConstraint('name', 'group_id', name='unique tag name per group', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('name', 'user_id', name='unique tag name per user', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('document_types',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('path_template', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('group_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.CheckConstraint('user_id IS NOT NULL OR group_id IS NOT NULL', name='check__user_id_not_null__or__group_id_not_null'),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], name='document_types_group_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='document_types_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='document_types_pkey'),
    sa.UniqueConstraint('name', 'group_id', name='unique document type per group', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('name', 'user_id', name='unique document type per user', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('custom_field_values',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('document_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('field_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('value_text', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('value_boolean', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('value_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('value_int', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('value_float', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('value_monetary', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('value_yearmonth', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['documents.node_id'], name='custom_field_values_document_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['field_id'], ['custom_fields.id'], name='custom_field_values_field_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='custom_field_values_pkey')
    )
    op.create_table('document_versions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('file_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('document_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('lang', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('text', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('size', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('page_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('short_description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['documents.node_id'], name='document_versions_document_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='document_versions_pkey')
    )
    # ### end Alembic commands ###
